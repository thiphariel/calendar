{"version":3,"sources":["components/DialogEvent.js","components/App.js","hooks/useMedia.js","index.js"],"names":["Dialog","styled","div","DialogBody","DialogHead","DialogClose","DialogContent","DialogButtons","DialogButton","button","props","isOk","Divider","DialogEvent","dialogEventData","setDialogEventData","portal","useState","title","setTitle","hide","selection","show","addEvent","calendarApi","view","calendar","unselect","id","Math","random","start","startStr","end","endStr","allDay","useEffect","document","querySelector","focus","ReactDOM","createPortal","onClick","type","value","onKeyPress","event","key","onChange","e","target","App","isDesktop","query","window","matchMedia","matches","state","setState","mounted","mql","addListener","removeListener","useMedia","plugins","dayGridPlugin","interactionPlugin","timeGridPlugin","locale","initialView","initialEvents","JSON","parse","localStorage","getItem","headerToolbar","left","center","right","selectable","editable","select","eventClick","confirm","remove","eventContent","eventInfo","timeText","style","marginLeft","eventsSet","events","setItem","stringify","longPressDelay","slotDuration","minutes","slotLabelInterval","hours","scrollTime","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d577fbf1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\n\nconst primary = '#2c3e50';\n\nconst Dialog = styled.div`\n  position: fixed;\n  top: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0,0,0,0.3);\n  z-index: 99999;\n  overflow: hidden;\n`\n\nconst DialogBody = styled.div`\n  background: white;\n  border-radius: 4px;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.4);\n`\n\nconst DialogHead = styled.div`\n  background: ${primary};\n  color: white;\n  padding: 10px 20px;\n  display: flex;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n`\n\nconst DialogClose = styled.div`\n  cursor: pointer;\n  background: #333;\n  width: 20px;\n  height: 20px;\n  margin-left: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n`\n\nconst DialogContent = styled.div`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n\n  input {\n    margin-left: 8px;\n    padding: 5px 10px;\n    font-size: 16px;\n  }\n`\n\nconst DialogButtons = styled.div`\n  display: flex;\n  padding: 20px 0 0;\n`\n\nconst DialogButton = styled.button`\n  background: ${props => props.isOk ? primary : '#dedede'};\n  color: ${props => props.isOk ? 'white' : '#333'};\n  border-radius: 4px;\n  padding: 5px 10px;\n  border: 0;\n  cursor: pointer;\n`\n\nconst Divider = styled.div`\n  width: 10px;\n`\n\nfunction DialogEvent({ dialogEventData, setDialogEventData, portal = '#dialog' }) {\n  const [title, setTitle] = useState('');\n\n  function hide() {\n    setDialogEventData({\n      selection: null,\n      show: false\n    });\n  }\n\n  function addEvent() {\n    const selection = dialogEventData.selection;\n    const calendarApi = selection.view.calendar;\n\n    calendarApi.unselect(); // clear date selection\n\n    if (title) {\n      calendarApi.addEvent({\n        id: Math.random(),\n        title,\n        start: selection.startStr,\n        end: selection.endStr,\n        allDay: selection.allDay\n      });\n\n      hide();\n    }\n  }\n\n  function handleKeydown(event) {\n    if (event.key === 'Enter') {\n      addEvent();\n    }\n  }\n\n  useEffect(() => {\n    document.querySelector('input').focus();\n  }, []);\n\n  return ReactDOM.createPortal(\n    <Dialog>\n      <DialogBody>\n        <DialogHead>\n          Ajouter un nouveau temps passé\n          <DialogClose onClick={hide}>✘</DialogClose>\n        </DialogHead>\n        <DialogContent>\n          <label>\n            Titre :\n            <input type=\"text\" value={title} onKeyPress={handleKeydown} onChange={e => setTitle(e.target.value)} />\n          </label>\n          <DialogButtons>\n            <DialogButton onClick={hide}>Annuler</DialogButton>\n            <Divider />\n            <DialogButton isOk onClick={addEvent}>Ok</DialogButton>\n          </DialogButtons>\n        </DialogContent>\n      </DialogBody>\n    </Dialog>,\n    document.querySelector(portal)\n  );\n}\n\nexport default DialogEvent;","import React, { useState } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { useMedia } from '../hooks/useMedia';\nimport DialogEvent from './DialogEvent';\n\nfunction App() {\n  const isDesktop = useMedia();\n  const [dialogEventData, setDialogEventData] = useState({\n    selection: null,\n    show: false\n  });\n\n  function handleDateSelect(selection) {\n    setDialogEventData({\n      selection,\n      show: true\n    });\n  }\n\n  function handleEventClick(selection) {\n    if (window.confirm(`Voulez-vous supprimer le temps \"${selection.event.title}\" ?`)) {\n      selection.event.remove();\n    }\n  }\n\n  function renderEventContent(eventInfo) {\n    return (\n      <>\n        <i>{eventInfo.timeText}</i>\n        <b style={{ marginLeft: 5 }}>{eventInfo.event.title}</b>\n      </>\n    )\n  }\n\n  function saveEvents(events) {\n    localStorage.setItem('events', JSON.stringify(events));\n  }\n\n  return (\n    <>\n      {dialogEventData.show && <DialogEvent dialogEventData={dialogEventData} setDialogEventData={setDialogEventData} />}\n      <FullCalendar\n        plugins={[dayGridPlugin, interactionPlugin, timeGridPlugin]}\n        locale={'fr'}\n        initialView={isDesktop ? 'timeGridWeek' : 'timeGridDay'}\n        initialEvents={JSON.parse(localStorage.getItem('events')) || []}\n        headerToolbar={{\n          left: 'prev,next',\n          center: 'title',\n          right: 'timeGridWeek,timeGridDay'\n        }}\n        selectable={true}\n        editable={true}\n        select={handleDateSelect}\n        eventClick={handleEventClick}\n        eventContent={renderEventContent}\n        eventsSet={saveEvents}\n        longPressDelay={250}\n        slotDuration={{ minutes: 15 }}\n        slotLabelInterval={{ hours: 1 }}\n        scrollTime={{ hours: 8 }}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react'\n\nexport function useMedia(query = \"(min-width: 600px)\") {\n  const [state, setState] = useState(() => window.matchMedia(query).matches)\n\n  useEffect(() => {\n    let mounted = true\n    const mql = window.matchMedia(query)\n\n    const onChange = () => {\n      if (!mounted) {\n        return\n      }\n\n      setState(!!mql.matches)\n    }\n\n    mql.addListener(onChange)\n    setState(mql.matches)\n\n    return () => {\n      mounted = false\n      mql.removeListener(onChange)\n    }\n  }, [query])\n\n  return state\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}